apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

/// Modify this variable to build the desired architectures.
String[] architectures = [
        'armeabi',
        'armeabi-v7a',
        'x86'
]

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    flavorDimensions 'screenSize'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 26

        applicationId 'com.ee.test.android'
        versionCode 1
        versionName '1.0.0'
        multiDexEnabled true

        // API key used for testing.
        manifestPlaceholders = [fabric_api_key: '45063244ecb24aee8a3b252cb5c6a2c549cf91f9']
    }

    splits {
        abi {
            enable true
            reset()
            include architectures
            universalApk false
        }
    }

    sourceSets {
        main {
            assets.srcDir '../../Resources'
            jni.srcDirs = []
            jniLibs.srcDir 'src/main/libs'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            debuggable false
            jniDebuggable false
        }
        debug {
            debuggable true
            jniDebuggable true
        }
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi', 'armeabi-v7a', 'x86'
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

crashlytics {
    enableNdk true
    androidNdkOut 'src/main/obj'
    androidNdkLibsOut 'src/main/libs'
}

/// External C++ build.
tasks.whenTaskAdded { task ->
    def name = task.name
    def found = false
    ['debug', 'release'].each { mode ->
        if (!found) {
            if (name == "prepare${mode.capitalize()}Dependencies") {
                task.doFirst {
                    def ndkDir = android.ndkDirectory
                    def cppFlags = [
                            '-frtti',
                            '-fexceptions',
                            '-fsigned-char',
                            '-U__SSE__'
                    ]
                    if (mode == 'debug') {
                        cppFlags.add('-DCOCOS2D_DEBUG=1')
                    } else {
                        cppFlags.add('-DNDEBUG')
                    }
                    exec {
                        commandLine "$ndkDir/ndk-build",
                                '-C', "$projectDir/src/main/jni",
                                '-j', Runtime.runtime.availableProcessors(),
                                'APP_STL=c++_static',
                                'NDK_TOOLCHAIN_VERSION=clang',
                                'APP_PLATFORM=android-9',
                                'APP_LDFLAGS=-latomic',
                                "APP_ABI=${architectures.join(' ')}",
                                "APP_CPPFLAGS=${cppFlags.join(' ')}",
                                "NDK_OUT=$projectDir/src/main/obj/$mode",
                                "NDK_DEBUG=${(mode == 'debug') ? 1 : 0}"
                    }
                }
                found = true;
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile project(':libcocos2dx')
    compile project(':ee-x-notification')
    compile project(':ee-x-crashlytics')
    compile project(':ee-x-google-analytics')
    compile project(':ee-x-firebase')
    compile project(':ee-x-ads')
    compile project(':ee-x-admob')
    compile project(':ee-x-applovin')
    compile project(':ee-x-facebook-ads')
    compile project(':ee-x-unity-ads')
    compile project(':ee-x-vungle')
    compile project(':ee-x-ironsource')

    compile 'com.android.support:appcompat-v7:26.0.2'
    compile 'com.android.support:multidex:1.0.1'

    compile 'com.google.android.gms:play-services-base:11.4.0'
}

apply plugin: 'com.google.gms.google-services'
